"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
# ★ 追記: 環境変数とDB接続用ライブラリをインポート
import os
import dj_database_url
from datetime import timedelta # Simple JWTは元のコードにあり

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# ★ 修正: 環境変数から読み込む
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-qc%5-12x6*)qfsw_xbdq2$&2617!lh6!^w^kynb3xwvn^@wxkv')

# SECURITY WARNING: don't run with debug turned on in production!
# ★ 修正: 環境変数から読み込む (Renderでは通常Falseにする)
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# ★ 修正: DisallowedHostエラー解消のため、環境変数からホスト名を読み込む
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',      # DRFの追加
    'accounts',            # 作成したアプリケーションの追加
    # simplejwtのモジュールをここに追記する必要があるかもしれません。
    # 以前のエラーログから、他のパッケージと一緒にインストールされることを前提とします。
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # ★ 追記: WhiteNoiseを適用 (SecurityMiddlewareの直後)
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# ★ 修正: RenderのPostgreSQL接続情報（DATABASE_URL）を環境変数から読み込む
DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///db.sqlite3',  # 環境変数がなければローカル用SQLite
        conn_max_age=600  # 接続の最大寿命 (Render向け)
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# ★ 追記: collectstaticで静的ファイルをまとめる場所 (WhiteNoiseが利用)
STATIC_ROOT = BASE_DIR / 'staticfiles' 
STATICFILES_DIRS = [
    # BASE_DIR / "static", # プロジェクト内で静的ファイルを置く場所があれば追記
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# カスタムユーザーモデルを指定
AUTH_USER_MODEL = 'accounts.CustomUser'


# Django REST Framework のデフォルト設定
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # デフォルトの認証クラスとして JWT 認証を指定
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # セッション認証も残しておく（DRFのブラウザAPIをテストに使う場合に便利）
        'rest_framework.authentication.SessionAuthentication',
    ),
    # 認証されていないリクエストのデフォルトのパーミッションを指定
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    )
}

# Simple JWT の設定
# from datetime import timedelta # ファイル先頭に移動済み

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1), # アクセストークンの有効期限
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1), # リフレッシュトークンの有効期限
    "ROTATE_REFRESH_TOKENS": True,
    "ALGORITHM": "HS256",
    # ... その他はデフォルト設定でOK
}
##コメント
